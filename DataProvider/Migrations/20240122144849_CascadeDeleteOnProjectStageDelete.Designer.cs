// <auto-generated />
using System;
using DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataProvider.Migrations
{
    [DbContext(typeof(AvetonDbContext))]
    [Migration("20240122144849_CascadeDeleteOnProjectStageDelete")]
    partial class CascadeDeleteOnProjectStageDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataCore.Entities.AvetonRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsSystemAdministrator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_system_administrator");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_aveton_roles");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("aveton_roles", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.AvetonRoleAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("EntityAction")
                        .HasColumnType("integer")
                        .HasColumnName("entity_action");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_name");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_allowed");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_aveton_role_accesses");

                    b.HasIndex("EntityAction");

                    b.HasIndex("EntityName");

                    b.HasIndex("Id");

                    b.HasIndex("IsAllowed");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RoleId");

                    b.ToTable("aveton_role_accesses", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.AvetonUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password_salt");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_aveton_users");

                    b.HasAlternateKey("Login");

                    b.HasIndex("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("aveton_users", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.AvetonUsersRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_aveton_users_roles");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("aveton_users_roles", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer")
                        .HasColumnName("client_type");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId", "PersonId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ParentDivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_division_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_divisions");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentDivisionId");

                    b.ToTable("divisions", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.DivisionContractor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("DivisionId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ProjectStageId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("project_stage_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_division_contractors");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectStageId");

                    b.HasIndex("DivisionId", "ProjectStageId");

                    b.ToTable("division_contractors", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AvetonUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("CredentialsId")
                        .HasColumnType("uuid")
                        .HasColumnName("credentials_id");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("last_name");

                    b.Property<string>("MobilePhoneNumber")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("mobile_phone_number");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("PathToAvatar")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("path_to_avatar");

                    b.Property<string>("SecondName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("second_name");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("AvetonUserId");

                    b.HasIndex("CredentialsId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("division_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PositionId");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Inn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("inn");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("SecondName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("second_name");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.ProjectStage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ParentStageId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_stage_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_project_stages");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentStageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_stages", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.StageManager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ProjectStageId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_stage_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_stage_managers");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectStageId", "EmployeeId");

                    b.ToTable("stage_managers", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.StageReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ProjectStageId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_stage_id");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("report_date");

                    b.Property<Guid?>("StageManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("stage_manager_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_stage_reports");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectStageId");

                    b.HasIndex("StageManagerId");

                    b.ToTable("stage_reports", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.StageReportAttachedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_login");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("StageReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("stage_report_id");

                    b.Property<string>("UpdatedByUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_login");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp(6) with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_stage_report_attached_files");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StageReportId");

                    b.ToTable("stage_report_attached_files", (string)null);
                });

            modelBuilder.Entity("DataCore.Entities.SystemOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("DataCore.Entities.AvetonRole", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Roles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aveton_roles_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataCore.Entities.AvetonRoleAccess", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Accesses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aveton_role_accesses_owner_id");

                    b.HasOne("DataCore.Entities.AvetonRole", "Role")
                        .WithMany("Accesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aveton_role_accesses_role_id");

                    b.Navigation("Owner");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataCore.Entities.AvetonUser", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Users")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aveton_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataCore.Entities.AvetonUsersRoles", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("UsersRoles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aveton_users_roles_owner_id");

                    b.HasOne("DataCore.Entities.AvetonRole", "Role")
                        .WithMany("NavigationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataCore.Entities.AvetonUser", "User")
                        .WithMany("NavigationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataCore.Entities.Client", b =>
                {
                    b.HasOne("DataCore.Entities.Organization", "Organization")
                        .WithMany("ProjectClients")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_clients_organization_id");

                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Clients")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_owner_id");

                    b.HasOne("DataCore.Entities.Person", "Person")
                        .WithMany("ProjectClients")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_clients_person_id");

                    b.HasOne("DataCore.Entities.Project", "Project")
                        .WithMany("Clients")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_project_id");

                    b.Navigation("Organization");

                    b.Navigation("Owner");

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataCore.Entities.Division", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Divisions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_divisions_owner_id");

                    b.HasOne("DataCore.Entities.Division", "ParentDivision")
                        .WithMany("ChildDivisions")
                        .HasForeignKey("ParentDivisionId")
                        .HasConstraintName("fk_divisions_parent_division_id");

                    b.Navigation("Owner");

                    b.Navigation("ParentDivision");
                });

            modelBuilder.Entity("DataCore.Entities.DivisionContractor", b =>
                {
                    b.HasOne("DataCore.Entities.Division", "Division")
                        .WithMany("NavigationDivisionContractors")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("DivisionContractors")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_division_contractors_owner_id");

                    b.HasOne("DataCore.Entities.ProjectStage", "ProjectStage")
                        .WithMany("NavigationDivisionContractors")
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Owner");

                    b.Navigation("ProjectStage");
                });

            modelBuilder.Entity("DataCore.Entities.Employee", b =>
                {
                    b.HasOne("DataCore.Entities.AvetonUser", null)
                        .WithMany("Employees")
                        .HasForeignKey("AvetonUserId");

                    b.HasOne("DataCore.Entities.AvetonUser", "Credentials")
                        .WithOne("Employee")
                        .HasForeignKey("DataCore.Entities.Employee", "CredentialsId")
                        .HasConstraintName("fk_employees_aveton_user_id");

                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Employees")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_owner_id");

                    b.Navigation("Credentials");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataCore.Entities.Job", b =>
                {
                    b.HasOne("DataCore.Entities.Division", "Division")
                        .WithMany("Jobs")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("fk_jobs_division_id");

                    b.HasOne("DataCore.Entities.Employee", "Employee")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_jobs_employee_id");

                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Jobs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jobs_owner_id");

                    b.HasOne("DataCore.Entities.Position", "Position")
                        .WithMany("Jobs")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("fk_jobs_position_id");

                    b.Navigation("Division");

                    b.Navigation("Employee");

                    b.Navigation("Owner");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DataCore.Entities.Organization", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Organizations")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organizations_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataCore.Entities.Person", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Persons")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persons_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataCore.Entities.Position", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Positions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_positions_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataCore.Entities.Project", b =>
                {
                    b.HasOne("DataCore.Entities.Employee", "Manager")
                        .WithMany("ProjectsWhereThisEmployeeIsManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_projects_manager_id");

                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_owner_id");

                    b.Navigation("Manager");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataCore.Entities.ProjectStage", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("ProjectStages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_stages_owner_id");

                    b.HasOne("DataCore.Entities.ProjectStage", "ParentStage")
                        .WithMany("ChildStages")
                        .HasForeignKey("ParentStageId")
                        .HasConstraintName("fk_project_stages_parent_stage_id");

                    b.HasOne("DataCore.Entities.Project", "Project")
                        .WithMany("Stages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_stages_project_id");

                    b.Navigation("Owner");

                    b.Navigation("ParentStage");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataCore.Entities.StageManager", b =>
                {
                    b.HasOne("DataCore.Entities.Employee", "Employee")
                        .WithMany("StageManagers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("StageManagers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stage_managers_owner_id");

                    b.HasOne("DataCore.Entities.ProjectStage", "ProjectStage")
                        .WithMany("StageManagers")
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Employee");

                    b.Navigation("Owner");

                    b.Navigation("ProjectStage");
                });

            modelBuilder.Entity("DataCore.Entities.StageReport", b =>
                {
                    b.HasOne("DataCore.Entities.Employee", "Employee")
                        .WithMany("StageReports")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("StageReports")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stage_reports_owner_id");

                    b.HasOne("DataCore.Entities.ProjectStage", "ProjectStage")
                        .WithMany("StageReports")
                        .HasForeignKey("ProjectStageId");

                    b.HasOne("DataCore.Entities.StageManager", "StageManager")
                        .WithMany("StageReports")
                        .HasForeignKey("StageManagerId");

                    b.Navigation("Employee");

                    b.Navigation("Owner");

                    b.Navigation("ProjectStage");

                    b.Navigation("StageManager");
                });

            modelBuilder.Entity("DataCore.Entities.StageReportAttachedFile", b =>
                {
                    b.HasOne("DataCore.Entities.SystemOwner", "Owner")
                        .WithMany("StageReportAttachedFiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stage_report_attached_files_owner_id");

                    b.HasOne("DataCore.Entities.StageReport", "StageReport")
                        .WithMany("AttachedFiles")
                        .HasForeignKey("StageReportId");

                    b.Navigation("Owner");

                    b.Navigation("StageReport");
                });

            modelBuilder.Entity("DataCore.Entities.AvetonRole", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("NavigationUserRoles");
                });

            modelBuilder.Entity("DataCore.Entities.AvetonUser", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("Employees");

                    b.Navigation("NavigationUserRoles");
                });

            modelBuilder.Entity("DataCore.Entities.Division", b =>
                {
                    b.Navigation("ChildDivisions");

                    b.Navigation("Jobs");

                    b.Navigation("NavigationDivisionContractors");
                });

            modelBuilder.Entity("DataCore.Entities.Employee", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("ProjectsWhereThisEmployeeIsManager");

                    b.Navigation("StageManagers");

                    b.Navigation("StageReports");
                });

            modelBuilder.Entity("DataCore.Entities.Organization", b =>
                {
                    b.Navigation("ProjectClients");
                });

            modelBuilder.Entity("DataCore.Entities.Person", b =>
                {
                    b.Navigation("ProjectClients");
                });

            modelBuilder.Entity("DataCore.Entities.Position", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("DataCore.Entities.Project", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("DataCore.Entities.ProjectStage", b =>
                {
                    b.Navigation("ChildStages");

                    b.Navigation("NavigationDivisionContractors");

                    b.Navigation("StageManagers");

                    b.Navigation("StageReports");
                });

            modelBuilder.Entity("DataCore.Entities.StageManager", b =>
                {
                    b.Navigation("StageReports");
                });

            modelBuilder.Entity("DataCore.Entities.StageReport", b =>
                {
                    b.Navigation("AttachedFiles");
                });

            modelBuilder.Entity("DataCore.Entities.SystemOwner", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Clients");

                    b.Navigation("DivisionContractors");

                    b.Navigation("Divisions");

                    b.Navigation("Employees");

                    b.Navigation("Jobs");

                    b.Navigation("Organizations");

                    b.Navigation("Persons");

                    b.Navigation("Positions");

                    b.Navigation("ProjectStages");

                    b.Navigation("Projects");

                    b.Navigation("Roles");

                    b.Navigation("StageManagers");

                    b.Navigation("StageReportAttachedFiles");

                    b.Navigation("StageReports");

                    b.Navigation("Users");

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
